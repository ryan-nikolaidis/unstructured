name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]

env:
  GHA_CACHE_KEY_VERSION: "v1"

jobs:
  skip_conditions:
    runs-on: ubuntu-latest
    outputs:
      no_code_changes: ${{ steps.version_only_change.outputs.should_skip }}
    steps:
    - id: version_only_change
      uses: fkirc/skip-duplicate-actions@v5
      with:
        paths_ignore: '["unstructured/__version__.py", "CHANGELOG.md"]'
        
  setup:
    needs: skip_conditions
    if: needs.skip_conditions.outputs.no_code_changes == 'false'
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10","3.11"]
    runs-on: ubuntu-latest
    env:
      NLTK_DATA: ${{ github.workspace }}/nltk_data
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ env.GHA_CACHE_KEY_VERSION }}-${{ hashFiles('requirements/*.txt') }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup virtual environment (no cache hit)
      run: |
        python${{ matrix.python-version }} -m venv .venv
        source .venv/bin/activate
        [ ! -d "$NLTK_DATA" ] && mkdir "$NLTK_DATA"
        make install-ci


  lint:
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10","3.11"]
    runs-on: ubuntu-latest
    needs: [setup, skip_conditions]
    if: needs.skip_conditions.outputs.no_code_changes == 'false'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache/restore@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ env.GHA_CACHE_KEY_VERSION }}-${{ hashFiles('requirements/*.txt') }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        python${{ matrix.python-version }} -m venv .venv
        source .venv/bin/activate
        make install-ci
    - name: Lint
      run: |
        source .venv/bin/activate
        make check-src
        make check-tests 

  lint_result: # report the final result of the lint job, so that it can be properly skipped as needed
    if: always()
    runs-on: ubuntu-latest
    needs:
      - skip_conditions
      - lint
    steps:
      - name: Mark result as failed
        if: needs.skip_conditions.outputs.no_code_changes == 'false' && needs.lint.result != 'success'
        run: exit 1

  check_version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Check Version
      run: |
        make check-version

  changelog:
    runs-on: ubuntu-latest
    steps:
    # need to checkout otherwise paths-filter will fail on merge-queue trigger 
    - uses: actions/checkout@v3
    - if: github.ref != 'refs/heads/main'
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          src:
            - 'unstructured/**'

    - if: steps.changes.outputs.src == 'true' && github.ref != 'refs/heads/main'
      uses: dangoslen/changelog-enforcer@v3

  shellcheck:
    runs-on: ubuntu-latest
    needs: [skip_conditions]
    if: needs.skip_conditions.outputs.no_code_changes == 'false'
    steps:
      - uses: actions/checkout@v3
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master

  test_unit:
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10","3.11"]
    runs-on: ubuntu-latest
    env:
      NLTK_DATA: ${{ github.workspace }}/nltk_data
    needs: [setup, skip_conditions, lint]
    if: needs.skip_conditions.outputs.no_code_changes == 'false'
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          echo "Success running unit tests"
          version=$(python --version 2>&1)
          echo "Python version: $version"
          if [[ "$version" == "Python 3.8"* ]]; then
            echo "Not Python 3.8"
            exit 1
          fi

  test_unit_result: # report the final result of the test_unit job, so that it can be properly skipped as needed
    if: always()
    runs-on: ubuntu-latest
    needs:
      - skip_conditions
      - test_unit
    steps:
      - name: Mark result as failed
        if: needs.skip_conditions.outputs.no_code_changes == 'false' && needs.test_unit.result != 'success'
        run: exit 1